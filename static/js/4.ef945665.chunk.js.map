{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messageElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStatePropsTypeForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCYpMC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAaC,IAAEC,OAAS,GAAKD,IAAEE,QAChC,kBAAC,IAAD,CAASC,GAAON,GAAhB,IAA0BD,EAAMQ,QCE7BC,EANC,SAACT,GACb,OACI,yBAAKG,UAAYC,IAAEM,SAAUV,EAAMU,U,kCC6BrCC,EAAcC,YAAiB,IAiB/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAfL,SAACd,GACpB,OAEI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAYC,IAAUC,SAAU,CAACC,IAAUX,GAAcH,KAAM,iBAAiBe,YAAc,wBAIzG,6BACI,6CAUDC,EAjDC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAYtB,KAAQsB,EAAEtB,KAAMN,GAAM4B,EAAE5B,QAEhF6B,EAAkBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAO,kBAAC,EAAD,CAASvB,QAAWuB,EAAEvB,aAMtE,OACI,yBAAKP,UAAaC,IAAEwB,SAChB,yBAAKzB,UAAaC,IAAE8B,cACfP,GAEL,yBAAKxB,UAAYC,IAAE4B,UACf,6BACI,6BAAMD,GACN,kBAAClB,EAAD,CAAqBG,SAZjB,SAACmB,GACjBnC,EAAMoC,YAAYD,EAAOE,uB,sDCb7BC,EAA+B,SAACb,GAAD,MAAY,CAC3Cc,OAAQd,EAAMe,KAAKD,SCcRE,sBAAQC,aAZC,SAACjB,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACiB,GACxB,MAAM,CACFP,YAAa,SAACC,GAAqBM,EAASC,YAAmBP,UDPvC,SAACQ,GAAe,IACtCC,EADqC,uKAGnC,OAAIC,KAAK/C,MAAMuC,OAGR,kBAACM,EAAeE,KAAK/C,OAFjB,kBAAC,IAAD,CAAUO,GAAM,eAJQ,GACXyC,IAAMH,WAUtC,OADqCH,YAAQJ,EAARI,CAAsCI,KCChEL,CAAwEjB","file":"static/js/4.ef945665.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__4lRFZ\",\"dialogsItems\":\"Dialogs_dialogsItems__1sAeT\",\"dialog\":\"Dialogs_dialog__37D9A\",\"active\":\"Dialogs_active__12X63\",\"messages\":\"Dialogs_messages__27pX1\",\"message\":\"Dialogs_message__1Z4UY\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className = {s.dialog + '' + s.active}>\r\n            <NavLink to = { path } > {props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <div className= {s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map ((d) => <DialogItem name = {d.name} id = {d.id}></DialogItem>);\r\n\r\n    let messageElements = state.messages.map((m) => <Message message = {m.message}></Message> );\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className = {s.dialogs}>\r\n            <div className = {s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className= {s.messages}>\r\n                <div>\r\n                    <div>{messageElements}</div>\r\n                    <AddMessageReduxForm onSubmit = {addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component= {Textarea} validate={[required, maxLength50]} name= \"newMessageBody\" placeholder = \"Enter your message\">\r\n\r\n                </Field>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )}\r\n\r\nconst AddMessageReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\n\r\n\r\n\r\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\r\nimport React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStatePropsTypeForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render(){\r\n            if(!this.props.isAuth){\r\n                return <Redirect to = {\"/login\"} />;\r\n            }\r\n            return <Component { ...this.props} />;\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectContainer = connect(mapStatePropsTypeForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectContainer;\r\n}","import React from 'react';\r\nimport {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        sendMessage: (newMessageBody) => { dispatch(sendMessageCreator(newMessageBody)); }\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n"],"sourceRoot":""}